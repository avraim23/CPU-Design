library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity main_system is
    Port (
        clk, rst, load, enab, data_en : in std_logic;
        cnt_in : in std_logic_vector(4 downto 0);
        data_in : in std_logic_vector(7 downto 0);
        sel : in std_logic;
        opcode : in std_logic_vector(2 downto 0);
        phase : in std_logic_vector(2 downto 0);
        zero : in std_logic;
        a_is_zero : out std_logic;
        cnt_out : out std_logic_vector(4 downto 0);
        data_out, alu_out : out std_logic_vector(7 downto 0);
        ld_ir, halt, inc_pc, ld_ac, ld_pc, wr, data_e : out std_logic
    );
end main_system;

architecture Behavioral of main_system is
    -- Component declarations
    component Controller is
        Port (
            clk, rst, zero : in std_logic;
            opcode : in std_logic_vector(2 downto 0);
            phase : in std_logic_vector(2 downto 0);
            sel, rd, ld_ir, halt, inc_pc, ld_ac, ld_pc, wr, data_e : out std_logic
        );
    end component;

    component memory is
        generic (
            AWIDTH : integer := 5;
            DWIDTH : integer := 8
        );
        port (
            clk : in std_logic;
            wr, rd : in std_logic;
            addr : in std_logic_vector(AWIDTH-1 downto 0);
            data : inout std_logic_vector(DWIDTH-1 downto 0)
        );
    end component;

    -- Other component declarations (add any additional components here)

    -- Signals
    signal reg_out, driver_out, mux_out, alu_in_a, alu_in_b : std_logic_vector(7 downto 0);
    signal data_out : std_logic_vector(7 downto 0);

begin
    -- Instantiate Controller
    controller_inst : Controller
        Port map (
            clk => clk,
            rst => rst,
            zero => zero,
            opcode => opcode,
            phase => phase,
            sel => sel,
            rd => rd,
            ld_ir => ld_ir,
            halt => halt,
            inc_pc => inc_pc,
            ld_ac => ld_ac,
            ld_pc => ld_pc,
            wr => wr,
            data_e => data_e
        );

    -- Instantiate Memory
    memory_inst : memory
        generic map (
            AWIDTH => 5,
            DWIDTH => 8
        )
        port map (
            clk => clk,
            wr => wr,
            rd => rd,
            addr => cnt_out,
            data => data_out
        );

    -- Other component instantiations (add any additional components here)

    -- Rest of the main_system architecture (connect other components)
    -- ...

    -- Assign data_out to data_in for output
    data_in <= data_out;

end Behavioral;
